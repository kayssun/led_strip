#!/usr/bin/env ruby

if ARGV[0] && ARGV[0]=='-b'
  case ARGV[1]
  when 'set'
    require 'ws_light/benchmark/set_benchmark'
  when 'animation'
    require 'ws_light/benchmark/animation_benchmark'
  when 'ws2801'
    require 'ws_light/benchmark/ws2801_benchmark'
  else
    puts 'Available benchmarks: set, animation, ws2801'
  end
  exit
end

require 'pi_piper'

include PiPiper

require 'socket'
require 'bundler'
require 'ws_light/strip'
require 'ws_light/sd_logger'
require 'ws_light/hass'

require 'ws_light/config'

TELEGRAF_IP = '127.0.0.1'.freeze
TELEGRAF_PORT = 8094

# Load config to overwrite default values
config = WSLight::Config.new.parse

logger = WSLight::SDLogger.new
logger.debug = false
logger.filename = config['log_file']
logger.log 'Starting up'

def unregister_pins
  [config['pin_right'], config['pin_left']].each do |pin|
    File.open('/sys/class/gpio/unexport', 'w') { |f| f.write("#{pin}") }
  end
end

# Trap ^C 
Signal.trap('INT') {
  logger.log 'Shutting down'
  logger.write_log
  unregister_pins
  exit
}
 
# Trap `kill `
Signal.trap('TERM') {
  logger.log 'Shutting down'
  logger.write_log
  unregister_pins
  exit
}

strip = WSLight::Strip.new
strip.debug = config['debug']
hass = Hass.new(config['hass_url'], config['hass_password'], logger)

socket = UDPSocket.new

after :pin => config['pin_right'], :goes => :high do
  logger.log('Motion detected: RIGHT') if config['track_motion_in_log']
  socket.send 'motion,room=hallway,sensor=right value=1', 0, TELEGRAF_IP, TELEGRAF_PORT
  strip.on(:direction_right)
  hass.send_data(config['sensor_right_name'], config['sensor_right_description']) if config['hass_integration']
end

after :pin => config['pin_left'], :goes => :high do
  logger.log('Motion detected: LEFT') if config['track_motion_in_log']
  socket.send 'motion,room=hallway,sensor=left value=1', 0, TELEGRAF_IP, TELEGRAF_PORT
  strip.on(:direction_left)
  hass.send_data(config['sensor_left_name'], config['sensor_left_description']) if config['hass_integration']
end

PiPiper.wait
	